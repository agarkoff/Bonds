package ru.misterparser.bonds.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.misterparser.bonds.model.Bond;
import ru.misterparser.bonds.model.OfferSubscription;
import ru.misterparser.bonds.repository.BondRepository;
import ru.misterparser.bonds.repository.OfferSubscriptionRepository;

import javax.annotation.PostConstruct;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

@Service
public class TelegramBotService extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(TelegramBotService.class);
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    @Value("${telegram.bot.token:}")
    private String botToken;

    @Value("${telegram.bot.username:BondsOfferBot}")
    private String botUsername;

    @Autowired
    private OfferSubscriptionRepository subscriptionRepository;

    @Autowired
    private BondRepository bondRepository;

    @PostConstruct
    public void init() {
        if (botToken == null || botToken.trim().isEmpty()) {
            logger.warn("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
        } else {
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {}", botUsername);
        }
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleTextMessage(update.getMessage());
        }
    }

    private void handleTextMessage(Message message) {
        String messageText = message.getText();
        Long chatId = message.getChatId();
        User user = message.getFrom();
        String username = user.getUserName() != null ? user.getUserName() : user.getFirstName();

        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {} ({}): {}", username, chatId, messageText);

        try {
            if (messageText.startsWith("/")) {
                handleCommand(chatId, username, messageText);
            } else {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ ISIN –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                handleIsinInput(chatId, username, messageText);
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void handleCommand(Long chatId, String username, String command) {
        switch (command.toLowerCase()) {
            case "/start":
                handleStartCommand(chatId, username);
                break;
            case "/help":
                handleHelpCommand(chatId);
                break;
            case "/list":
                handleListCommand(chatId);
                break;
            case "/clear":
                handleClearCommand(chatId);
                break;
            default:
                if (command.toLowerCase().startsWith("/remove ")) {
                    String isin = command.substring(8).trim().toUpperCase();
                    handleRemoveCommand(chatId, isin);
                } else {
                    sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.");
                }
        }
    }

    private void handleStartCommand(Long chatId, String username) {
        String welcomeMessage = 
            "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ñ–µ—Ä—Ç –æ–±–ª–∏–≥–∞—Ü–∏–π!*\n\n" +
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –æ—Ñ–µ—Ä—Ç—ã –ø–æ –≤–∞—à–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º.\n\n" +
            "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n" +
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–π –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π\n" +
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ—Ñ–µ—Ä—Ç–∞—Ö\n\n" +
            "*–ö–æ–º–∞–Ω–¥—ã:*\n" +
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
            "/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n" +
            "/clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏\n" +
            "/remove ISIN - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é\n\n" +
            "üìù *–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë ISIN –∫–æ–¥*";
        
        sendMessage(chatId, welcomeMessage);
    }

    private void handleHelpCommand(Long chatId) {
        String helpMessage = 
            "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n" +
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n" +
            "/clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏\n" +
            "/remove ISIN - —É–¥–∞–ª–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n" +
            "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–π:*\n" +
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ISIN –∫–æ–¥ –æ–±–ª–∏–≥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: RU000A0JX0J2)\n\n" +
            "*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n" +
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ú–°–ö –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π, " +
            "–ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ—Ñ–µ—Ä—Ç–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö 2 –Ω–µ–¥–µ–ª—å";
        
        sendMessage(chatId, helpMessage);
    }

    private void handleListCommand(Long chatId) {
        List<OfferSubscription> subscriptions = subscriptionRepository.findByUserChatId(chatId);
        
        if (subscriptions.isEmpty()) {
            sendMessage(chatId, "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç.\n\n" +
                              "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ISIN –∫–æ–¥ –æ–±–ª–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.");
            return;
        }

        StringBuilder message = new StringBuilder();
        message.append("üìã *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Ñ–µ—Ä—Ç—ã* (").append(subscriptions.size()).append("):\n\n");

        for (OfferSubscription subscription : subscriptions) {
            Optional<Bond> bondOpt = bondRepository.findByIsin(subscription.getIsin());
            if (bondOpt.isPresent()) {
                Bond bond = bondOpt.get();
                message.append("üîπ ").append(subscription.getIsin());
                if (bond.getTicker() != null) {
                    message.append(" (").append(bond.getTicker()).append(")");
                }
                message.append("\n");
                if (bond.getShortName() != null) {
                    message.append("   ").append(bond.getShortName()).append("\n");
                }
                if (bond.getOfferDate() != null) {
                    message.append("   üìÖ –û—Ñ–µ—Ä—Ç–∞: ").append(bond.getOfferDate().format(DATE_FORMATTER)).append("\n");
                }
                message.append("\n");
            } else {
                message.append("üîπ ").append(subscription.getIsin()).append(" (–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)\n\n");
            }
        }

        message.append("üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove ISIN");
        sendMessage(chatId, message.toString());
    }

    private void handleClearCommand(Long chatId) {
        int removed = subscriptionRepository.removeAllSubscriptionsByUser(chatId);
        if (removed > 0) {
            sendMessage(chatId, "üóëÔ∏è –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã (" + removed + " —à—Ç.)");
        } else {
            sendMessage(chatId, "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø—É—Å—Ç");
        }
    }

    private void handleRemoveCommand(Long chatId, String isin) {
        if (isin.length() != 12) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISIN. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: RU000A0JX0J2)");
            return;
        }

        boolean removed = subscriptionRepository.removeSubscription(chatId, isin);
        if (removed) {
            sendMessage(chatId, "‚úÖ –û–±–ª–∏–≥–∞—Ü–∏—è " + isin + " —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è");
        } else {
            sendMessage(chatId, "‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è " + isin + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è");
        }
    }

    private void handleIsinInput(Long chatId, String username, String input) {
        String isin = input.trim().toUpperCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ISIN
        if (isin.length() != 12 || !isin.matches("[A-Z]{2}[0-9A-Z]{10}")) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISIN.\n\n" +
                              "ISIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: RU000A0JX0J2)\n\n" +
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±–ª–∏–≥–∞—Ü–∏—è –≤ –±–∞–∑–µ
        Optional<Bond> bondOpt = bondRepository.findByIsin(isin);
        if (!bondOpt.isPresent()) {
            sendMessage(chatId, "‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è —Å ISIN " + isin + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n" +
                              "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ ISIN —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.");
            return;
        }

        Bond bond = bondOpt.get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
        if (subscriptionRepository.isSubscribed(chatId, isin)) {
            sendMessage(chatId, "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –æ–±–ª–∏–≥–∞—Ü–∏—é " + isin + 
                              (bond.getTicker() != null ? " (" + bond.getTicker() + ")" : ""));
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscriptionRepository.addSubscription(chatId, username, isin);

        StringBuilder response = new StringBuilder();
        response.append("‚úÖ *–û–±–ª–∏–≥–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ*\n\n");
        response.append("üîπ ISIN: ").append(isin);
        if (bond.getTicker() != null) {
            response.append(" (").append(bond.getTicker()).append(")");
        }
        response.append("\n");
        
        if (bond.getShortName() != null) {
            response.append("üìù ").append(bond.getShortName()).append("\n");
        }
        
        if (bond.getOfferDate() != null) {
            response.append("üìÖ –î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã: ").append(bond.getOfferDate().format(DATE_FORMATTER)).append("\n");
        } else {
            response.append("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–µ—Ä—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n");
        }

        int subscriptionCount = subscriptionRepository.countByUserChatId(chatId);
        response.append("\nüìä –í—Å–µ–≥–æ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏: ").append(subscriptionCount).append(" –æ–±–ª–∏–≥–∞—Ü–∏–π");

        sendMessage(chatId, response.toString());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public void sendMessage(Long chatId, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(text);
            message.setParseMode("Markdown");
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ—Ñ–µ—Ä—Ç–∞—Ö
     */
    public void sendOfferNotification(Long chatId, List<Bond> bonds) {
        if (bonds.isEmpty()) {
            return;
        }

        StringBuilder message = new StringBuilder();
        message.append("üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ—Ñ–µ—Ä—Ç–∞—Ö*\n\n");
        message.append("–£ –≤–∞—à–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π —Å–∫–æ—Ä–æ –Ω–∞—Å—Ç—É–ø–∞—é—Ç –æ—Ñ–µ—Ä—Ç—ã:\n\n");

        for (Bond bond : bonds) {
            message.append("üî∏ ").append(bond.getIsin());
            if (bond.getTicker() != null) {
                message.append(" (").append(bond.getTicker()).append(")");
            }
            message.append("\n");
            
            if (bond.getShortName() != null) {
                message.append("   ").append(bond.getShortName()).append("\n");
            }
            
            if (bond.getOfferDate() != null) {
                message.append("   üìÖ ").append(bond.getOfferDate().format(DATE_FORMATTER)).append("\n");
            }
            message.append("\n");
        }

        message.append("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –æ—Ñ–µ—Ä—Ç–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã!");
        sendMessage(chatId, message.toString());
    }
}