package ru.misterparser.bonds.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.misterparser.bonds.model.Bond;
import ru.misterparser.bonds.model.RatingSubscription;
import ru.misterparser.bonds.model.TelegramUser;
import ru.misterparser.bonds.repository.BondRepository;
import ru.misterparser.bonds.repository.RatingSubscriptionRepository;
import ru.misterparser.bonds.repository.TelegramUserRepository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class RatingNotificationService {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    private final RatingSubscriptionRepository subscriptionRepository;
    private final BondRepository bondRepository;
    private final TelegramUserRepository telegramUserRepository;
    private final TelegramBotService telegramBotService;
    private final BondFilteringService bondFilteringService;
    private final RatingColorService ratingColorService;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    @Transactional
    public void processRatingSubscriptions() {
        log.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥...");
        
        List<RatingSubscription> subscriptionsToSend = subscriptionRepository.findSubscriptionsToSend();
        
        log.info("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", subscriptionsToSend.size());
        
        for (RatingSubscription subscription : subscriptionsToSend) {
            try {
                sendSubscriptionNotification(subscription, false);
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {}: {}", 
                           subscription.getId(), e.getMessage(), e);
            }
        }
        
        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
     */
    @Transactional
    public void sendSubscriptionNotification(RatingSubscription subscription, boolean forceMode) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(subscription.getTelegramUserId());
            if (userOpt.isEmpty()) {
                log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {}", subscription.getId());
                return;
            }
            
            TelegramUser user = userOpt.get();
            if (!user.isEnabled()) {
                log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É", user.getId());
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–¥–ø–∏—Å–∫–∏
            List<Bond> bonds = getFilteredBonds(subscription);
            
            if (bonds.isEmpty()) {
                log.debug("–ù–µ—Ç –æ–±–ª–∏–≥–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–¥–ø–∏—Å–∫–∏ {}", subscription.getId());
                if (forceMode) {
                    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
                    sendEmptyResultMessage(user.getTelegramId(), subscription);
                }
                return;
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤
            List<Bond> limitedBonds = bonds.stream()
                .limit(subscription.getTickerCount())
                .collect(Collectors.toList());

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendBondsMessage(user.getTelegramId(), subscription, limitedBonds, forceMode);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            subscriptionRepository.updateLastSentAt(subscription.getId(), LocalDateTime.now());
            
            log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} ({} –æ–±–ª–∏–≥–∞—Ü–∏–π)", 
                       subscription.getId(), user.getId(), limitedBonds.size());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {}: {}", 
                       subscription.getId(), e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private List<Bond> getFilteredBonds(RatingSubscription subscription) {
        // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        BondFilteringService.FilterParams params = new BondFilteringService.FilterParams();
        params.setMinWeeksToMaturity(subscription.getMinMaturityWeeks());
        params.setMaxWeeksToMaturity(subscription.getMaxMaturityWeeks());
        params.setMinYield(subscription.getMinYield());
        params.setMaxYield(subscription.getMaxYield());
        params.setIncludeOffer(subscription.isIncludeOffer());
        params.setCustomFeePercent(subscription.getFeePercent()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        params.setLimit(null); // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ—Å–ª–µ
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        return bondFilteringService.getFilteredAndSortedBonds(params);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏
     */
    private void sendBondsMessage(Long chatId, RatingSubscription subscription, List<Bond> bonds, boolean forceMode) {
        StringBuilder message = new StringBuilder();
        
        if (forceMode) {
            message.append("üîî *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n");
        } else {
            message.append("üìä *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞*\n\n");
        }
        
        message.append("üìã **").append(subscription.getName()).append("**\n\n");
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
        message.append("‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:*\n");
        if (subscription.getMinYield() != null || subscription.getMaxYield() != null) {
            message.append("üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ");
            if (subscription.getMinYield() != null) {
                message.append("–æ—Ç ").append(String.format("%.2f", subscription.getMinYield())).append("%");
            }
            if (subscription.getMaxYield() != null) {
                if (subscription.getMinYield() != null) message.append(" ");
                message.append("–¥–æ ").append(String.format("%.2f", subscription.getMaxYield())).append("%");
            }
            message.append("\n");
        }
        
        if (subscription.getMinMaturityWeeks() != null || subscription.getMaxMaturityWeeks() != null) {
            message.append("üìÖ –°—Ä–æ–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è: ");
            if (subscription.getMinMaturityWeeks() != null) {
                message.append("–æ—Ç ").append(subscription.getMinMaturityWeeks()).append(" –Ω–µ–¥.");
            }
            if (subscription.getMaxMaturityWeeks() != null) {
                if (subscription.getMinMaturityWeeks() != null) message.append(" ");
                message.append("–¥–æ ").append(subscription.getMaxMaturityWeeks()).append(" –Ω–µ–¥.");
            }
            message.append("\n");
        }
        
        if (subscription.isIncludeOffer()) {
            message.append("üéØ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ñ–µ—Ä—Ç—ã\n");
        }
        
        message.append("\nüìà *–¢–æ–ø ").append(bonds.size()).append(" –æ–±–ª–∏–≥–∞—Ü–∏–π:*\n\n");
        
        // –°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
        for (int i = 0; i < bonds.size(); i++) {
            Bond bond = bonds.get(i);
            message.append(i + 1).append(". ");
            
            if (bond.getTicker() != null) {
                message.append("**").append(bond.getTicker()).append("**");
            } else if (bond.getIsin() != null) {
                message.append("**").append(bond.getIsin()).append("**");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ñ–µ—Ä—Ç–∞ —É –æ–±–ª–∏–≥–∞—Ü–∏–∏
            boolean hasOffer = bond.getOfferDate() != null && bond.getOfferDate().isAfter(java.time.LocalDate.now());
            boolean isUsingOfferData = subscription.isIncludeOffer() && bond.getOfferDate() != null && bond.getAnnualYieldOffer() != null;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–µ—Ä—Ç—ã –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (hasOffer) {
                message.append(" üéØ**[–û–§–ï–†–¢–ê]**");
            }
            
            if (bond.getShortName() != null) {
                message.append("\n   ").append(bond.getShortName());
            }
            
            // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —á—Ç–æ –∏ –≤ BondFilteringService)
            BigDecimal yield = bondFilteringService.getEffectiveYield(bond, subscription.isIncludeOffer());
            
            if (yield != null) {
                message.append("\n   üìä ").append(String.format("%.2f", yield)).append("% –≥–æ–¥–æ–≤—ã—Ö");
                if (isUsingOfferData) {
                    message.append(" *(–ø–æ –æ—Ñ–µ—Ä—Ç–µ)*");
                }
            }
            
            // –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ñ–µ—Ä—Ç—ã
            if (isUsingOfferData) {
                message.append("\n   üéØ –û—Ñ–µ—Ä—Ç–∞: ").append(bond.getOfferDate().format(DATE_FORMATTER));
                // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                if (bond.getMaturityDate() != null) {
                    message.append("\n   üìÖ –ü–æ–≥–∞—à–µ–Ω–∏–µ: ").append(bond.getMaturityDate().format(DATE_FORMATTER));
                }
            } else {
                if (bond.getMaturityDate() != null) {
                    message.append("\n   üìÖ –ü–æ–≥–∞—à–µ–Ω–∏–µ: ").append(bond.getMaturityDate().format(DATE_FORMATTER));
                }
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–µ—Ä—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                if (hasOffer) {
                    message.append("\n   üéØ –î–æ—Å—Ç—É–ø–Ω–∞ –æ—Ñ–µ—Ä—Ç–∞: ").append(bond.getOfferDate().format(DATE_FORMATTER));
                }
            }
            
            // –†–µ–π—Ç–∏–Ω–≥ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —à–∞—Ä–∞–º–∏
            if (bond.getRatingValue() != null) {
                String ratingWithBalls = ratingColorService.formatRatingWithBalls(bond.getRatingValue());
                message.append("\n   ‚≠ê ").append(ratingWithBalls);
            }
            
            message.append("\n\n");
        }
        
        message.append("üí° *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ*\n");
        message.append("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ ").append(subscription.getPeriodHours()).append(" —á.");
        
        telegramBotService.sendMessage(chatId, message.toString());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
     */
    private void sendEmptyResultMessage(Long chatId, RatingSubscription subscription) {
        StringBuilder message = new StringBuilder();
        message.append("üîî *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n");
        message.append("üìã **").append(subscription.getName()).append("**\n\n");
        message.append("‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±–ª–∏–≥–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n\n");
        message.append("‚öôÔ∏è *–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:*\n");
        
        if (subscription.getMinYield() != null || subscription.getMaxYield() != null) {
            message.append("üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ");
            if (subscription.getMinYield() != null) {
                message.append("–æ—Ç ").append(String.format("%.2f", subscription.getMinYield())).append("%");
            }
            if (subscription.getMaxYield() != null) {
                if (subscription.getMinYield() != null) message.append(" ");
                message.append("–¥–æ ").append(String.format("%.2f", subscription.getMaxYield())).append("%");
            }
            message.append("\n");
        }
        
        if (subscription.getMinMaturityWeeks() != null || subscription.getMaxMaturityWeeks() != null) {
            message.append("üìÖ –°—Ä–æ–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è: ");
            if (subscription.getMinMaturityWeeks() != null) {
                message.append("–æ—Ç ").append(subscription.getMinMaturityWeeks()).append(" –Ω–µ–¥.");
            }
            if (subscription.getMaxMaturityWeeks() != null) {
                if (subscription.getMinMaturityWeeks() != null) message.append(" ");
                message.append("–¥–æ ").append(subscription.getMaxMaturityWeeks()).append(" –Ω–µ–¥.");
            }
            message.append("\n");
        }
        
        if (subscription.isIncludeOffer()) {
            message.append("üéØ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ñ–µ—Ä—Ç—ã\n");
        }
        
        message.append("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
        
        telegramBotService.sendMessage(chatId, message.toString());
    }
}