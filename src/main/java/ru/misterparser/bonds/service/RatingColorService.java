package ru.misterparser.bonds.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@Slf4j
public class RatingColorService {

    private List<String> colors = new ArrayList<>();
    private Map<String, String> ratingBalls = new HashMap<>();

    @PostConstruct
    public void init() {
        loadColors();
        loadRatingBalls();
    }

    public void loadColors() {
        try {
            ClassPathResource resource = new ClassPathResource("rating-gradient.js");
            String content = new String(resource.getInputStream().readAllBytes(), StandardCharsets.UTF_8);

            // –ü–∞—Ä—Å–∏–º JS —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è hex —Ü–≤–µ—Ç–æ–≤
            parseColorsFromJS(content);
            
            log.info("Loaded {} colors from rating-gradient.js", colors.size());
            
        } catch (IOException e) {
            log.error("Failed to load rating-gradient.js, using default colors", e);
            loadDefaultColors();
        }
    }

    private void parseColorsFromJS(String jsContent) {
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ hex —Ü–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex: '#XXXXXX'
        Pattern pattern = Pattern.compile("hex:\\s*'(#[0-9A-Fa-f]{6})'");
        Matcher matcher = pattern.matcher(jsContent);
        
        colors.clear();
        while (matcher.find()) {
            colors.add(matcher.group(1));
        }
        
        if (colors.isEmpty()) {
            log.warn("No colors found in JS file, loading defaults");
            loadDefaultColors();
        }
    }

    private void loadDefaultColors() {
        colors.clear();
        // Fallback —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        colors.add("#CC0000"); // –¢—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        colors.add("#CC1500"); 
        colors.add("#CC2900"); 
        colors.add("#CC3D00"); 
        colors.add("#CC5200"); 
        colors.add("#CC6600"); 
        colors.add("#CC7A00"); 
        colors.add("#CC8F00"); 
        colors.add("#CCA300"); 
        colors.add("#CCB800"); 
        colors.add("#CCCC00"); 
        colors.add("#B8CC00"); 
        colors.add("#A3CC00"); 
        colors.add("#8FCC00"); 
        colors.add("#7ACC00"); 
        colors.add("#66CC00"); 
        colors.add("#52CC00"); 
        colors.add("#3DCC00"); 
        colors.add("#29CC00"); 
        colors.add("#15CC00"); 
        colors.add("#00CC00"); // –¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ–±–ª–∏–≥–∞—Ü–∏–∏
     * –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ (—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ) –¥–æ –∑–µ–ª—ë–Ω–æ–≥–æ (–Ω–∞–¥—ë–∂–Ω—ã–µ)
     * 
     * @param ratingCode —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—á–µ–º –º–µ–Ω—å—à–µ –∫–æ–¥, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–π—Ç–∏–Ω–≥)
     * @return —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex
     */
    public String getRatingColor(Integer ratingCode) {
        if (ratingCode == null) {
            return "#6c757d"; // –°–µ—Ä—ã–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        }

        if (colors.isEmpty()) {
            loadDefaultColors();
        }

        // –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ ratings.md (—Å —É—á—ë—Ç–æ–º –¥—ã—Ä –≤ —à–∫–∞–ª–µ):
        // 48-54: –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (ruAAA - ruA-) - –∑–µ–ª—ë–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–ª—É—á—à–∏–µ - —Å–∞–º—ã–µ –∑–µ–ª—ë–Ω—ã–µ)
        // 146-154: —Ö–æ—Ä–æ—à–∏–µ/—Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (ruBBB+ - ruB-) - –∂—ë–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–µ —Ü–≤–µ—Ç–∞
        // 249-253: –Ω–∏–∑–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (ruCCC - ruD) - –∫—Ä–∞—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (—Ö—É–¥—à–∏–µ - —Å–∞–º—ã–µ –∫—Ä–∞—Å–Ω—ã–µ)

        int totalColors = colors.size();

        if (ratingCode >= 48 && ratingCode <= 54) {
            // –ì—Ä—É–ø–ø–∞ A: ruAAA - ruA- (–∫–æ–¥—ã 48-54) - –∑–µ–ª—ë–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ—Ç—å –º–∞—Å—Å–∏–≤–∞)
            // ruAAA (48) -> —Å–∞–º—ã–π –∑–µ–ª—ë–Ω—ã–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–≤–µ—Ç), ruA- (54) -> –º–µ–Ω–µ–µ –∑–µ–ª—ë–Ω—ã–π
            double groupRatio = (ratingCode - 48.0) / (54.0 - 48.0);
            int greenStart = (int) (totalColors * 0.67); // –ù–∞—á–∞–ª–æ –∑–µ–ª—ë–Ω–æ–π –∑–æ–Ω—ã (67%)
            int colorIndex = (int) (totalColors - 1 - groupRatio * (totalColors - 1 - greenStart));
            return colors.get(Math.max(greenStart, Math.min(totalColors - 1, colorIndex)));
            
        } else if (ratingCode >= 146 && ratingCode <= 154) {
            // –ì—Ä—É–ø–ø–∞ B: ruBBB+ - ruB- (–∫–æ–¥—ã 146-154) - –∂—ë–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ (—Å—Ä–µ–¥–Ω—è—è —Ç—Ä–µ—Ç—å)
            // ruBBB+ (146) -> –±–æ–ª–µ–µ –∑–µ–ª—ë–Ω—ã–π, ruB- (154) -> –±–æ–ª–µ–µ –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            double groupRatio = (ratingCode - 146.0) / (154.0 - 146.0);
            int orangeStart = (int) (totalColors * 0.33); // –ù–∞—á–∞–ª–æ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∑–æ–Ω—ã (33%)
            int orangeEnd = (int) (totalColors * 0.67); // –ö–æ–Ω–µ—Ü –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∑–æ–Ω—ã (67%)
            int colorIndex = (int) (orangeEnd - 1 - groupRatio * (orangeEnd - orangeStart - 1));
            return colors.get(Math.max(orangeStart, Math.min(orangeEnd - 1, colorIndex)));

        } else if (ratingCode >= 249 && ratingCode <= 253) {
            // –ì—Ä—É–ø–ø–∞ C: ruCCC - ruD (–∫–æ–¥—ã 249-253) - –∫—Ä–∞—Å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ (–ø–µ—Ä–≤–∞—è —Ç—Ä–µ—Ç—å)
            // ruCCC (249) -> –º–µ–Ω–µ–µ –∫—Ä–∞—Å–Ω—ã–π, ruD (253) -> —Å–∞–º—ã–π –∫—Ä–∞—Å–Ω—ã–π (–ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç)
            double groupRatio = (ratingCode - 249.0) / (253.0 - 249.0);
            int redEnd = (int) (totalColors * 0.33); // –ö–æ–Ω–µ—Ü –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã (33%)
            int colorIndex = (int) (redEnd - 1 - groupRatio * (redEnd - 1));
            return colors.get(Math.max(0, Math.min(redEnd - 1, colorIndex)));
            
        } else if (ratingCode < 48) {
            // –õ—É—á—à–µ ruAAA - —Å–∞–º—ã–π –∑–µ–ª—ë–Ω—ã–π
            return colors.get(totalColors - 1);
        } else if (ratingCode > 253) {
            // –•—É–∂–µ ruD - —Å–∞–º—ã–π –∫—Ä–∞—Å–Ω—ã–π
            return colors.get(0);
        } else {
            // –ü–æ–ø–∞–¥–∞–µ—Ç –≤ –¥—ã—Ä—ã —à–∫–∞–ª—ã - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é –≥—Ä—É–ø–ø—É
            if (ratingCode < 146) {
                // –ú–µ–∂–¥—É A –∏ BBB –≥—Ä—É–ø–ø–∞–º–∏ - –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –∑–µ–ª—ë–Ω–æ-–∂—ë–ª—Ç—ã–π (67% –æ—Ç –º–∞—Å—Å–∏–≤–∞)
                return colors.get((int) (totalColors * 0.67));
            } else if (ratingCode < 249) {
                // –ú–µ–∂–¥—É BBB –∏ CCC –≥—Ä—É–ø–ø–∞–º–∏ - –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π (33% –æ—Ç –º–∞—Å—Å–∏–≤–∞)
                return colors.get((int) (totalColors * 0.33));
            } else {
                // –ù–µ –¥–æ–ª–∂–Ω–æ —Å—é–¥–∞ –ø–æ–ø–∞—Å—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                return colors.get(0);
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∫ —Ü–≤–µ—Ç–æ–≤—ã–º —à–∞—Ä–∞–º –∏–∑ —Ñ–∞–π–ª–∞ rating-ball.md
     */
    private void loadRatingBalls() {
        try {
            ClassPathResource resource = new ClassPathResource("rating-ball.md");

            if (!resource.exists()) {
                log.warn("–§–∞–π–ª rating-ball.md –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ resources, —Ü–≤–µ—Ç–æ–≤—ã–µ —à–∞—Ä—ã –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
                return;
            }

            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8))) {

                String line;
                int lineNumber = 0;

                while ((line = reader.readLine()) != null) {
                    lineNumber++;
                    line = line.trim();

                    if (line.isEmpty() || line.startsWith("#")) {
                        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    }

                    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: "ruAAA üü¢üü¢üü¢"
                    String[] parts = line.split("\\s+", 2);
                    if (parts.length == 2) {
                        String rating = parts[0].trim();
                        String balls = parts[1].trim();

                        ratingBalls.put(rating, balls);
                        log.debug("–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–∞: {} -> {}", rating, balls);
                    } else {
                        log.warn("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ {} –≤ —Ñ–∞–π–ª–µ rating-ball.md: {}", lineNumber, line);
                    }
                }

                log.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ rating-ball.md", ratingBalls.size());

            }
        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ rating-ball.md", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ —à–∞—Ä—ã –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
     *
     * @param rating —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–ª–∏–≥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "ruAAA", "ruBBB+")
     * @return —Ü–≤–µ—Ç–æ–≤—ã–µ —à–∞—Ä—ã –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public String getRatingBalls(String rating) {
        if (rating == null || rating.trim().isEmpty()) {
            return "";
        }

        String normalizedRating = rating.trim();
        String balls = ratingBalls.get(normalizedRating);

        if (balls == null) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            for (Map.Entry<String, String> entry : ratingBalls.entrySet()) {
                if (entry.getKey().equalsIgnoreCase(normalizedRating)) {
                    balls = entry.getValue();
                    break;
                }
            }
        }

        return balls != null ? balls : "";
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —à–∞—Ä–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     *
     * @param rating —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–ª–∏–≥–∞—Ü–∏–∏
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —à–∞—Ä–∞–º–∏
     */
    public String formatRatingWithBalls(String rating) {
        if (rating == null || rating.trim().isEmpty()) {
            return "";
        }

        String balls = getRatingBalls(rating);
        if (balls.isEmpty()) {
            return rating; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥, –µ—Å–ª–∏ —à–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        }

        return rating + " " + balls;
    }

}